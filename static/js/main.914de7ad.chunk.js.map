{"version":3,"sources":["components/Error.js","components/Formulario.js","components/Imagen.js","components/ListadoImagenes.js","App.js","serviceWorker.js","index.js"],"names":["Error","mensaje","className","Formulario","setBusqueda","useState","termino","setTermino","error","setError","onSubmit","e","preventDefault","trim","type","placeholder","onChange","target","value","Imagen","imagen","previewURL","largeImageURL","likes","tags","views","src","alt","ListadoImagenes","imagenes","map","key","id","App","busqueda","setImagenes","useEffect","a","url","fetch","response","json","result","hits","console","log","consultarApi","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"8LASeA,EAND,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACb,OACI,uBAAGC,UAAU,6CAA6CD,IC6CnDE,EA/CI,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAAiB,EAEJC,mBAAS,IAFL,mBAE3BC,EAF2B,KAElBC,EAFkB,OAGRF,oBAAS,GAHD,mBAG3BG,EAH2B,KAGpBC,EAHoB,KAgBlC,OACI,0BACIC,SAbe,SAAAC,GACnBA,EAAEC,iBAEqB,KAAnBN,EAAQO,QAIZJ,GAAS,GACTL,EAAYE,IAJRG,GAAS,KAWT,yBAAKP,UAAU,OACX,yBAAKA,UAAU,uBACX,2BACIY,KAAK,OACLZ,UAAU,+BACVa,YAAY,8CACZC,SAAU,SAAAL,GAAC,OAAIJ,EAAWI,EAAEM,OAAOC,WAG3C,yBAAKhB,UAAU,uBACX,2BACIY,KAAK,SACLZ,UAAU,kCACVgB,MAAM,aAIjBV,EACK,kBAAC,EAAD,CACEP,QAAQ,wCAEV,OC7BHkB,EAbA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEgBC,GAA4BD,EAAlDE,cAAkDF,EAAnCG,MAAmCH,EAA5BC,YAAYG,EAAgBJ,EAAhBI,KAAgBJ,EAAVK,MAEhD,OACI,yBAAKvB,UAAU,0CACX,yBAAKA,UAAU,QACX,yBAAKwB,IAAKL,EAAYM,IAAKH,EAAMtB,UAAU,oBCO5C0B,EAbS,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACvB,OACI,yBAAK3B,UAAU,kBACV2B,EAASC,KAAI,SAAAV,GAAM,OAChB,kBAAC,EAAD,CACIW,IAAKX,EAAOY,GACZZ,OAAQA,SCmCba,MAxCf,WAAgB,IAAD,EAEmB5B,mBAAS,IAF5B,mBAEN6B,EAFM,KAEI9B,EAFJ,OAGmBC,mBAAS,IAH5B,mBAGNwB,EAHM,KAGIM,EAHJ,KAuBb,OAlBAC,qBAAU,YACU,uCAAG,gCAAAC,EAAA,yDACF,KAAbH,EADe,wDAGO,GACd,qCACNI,EALa,uCAIP,qCAJO,cAKkCJ,EALlC,sBAGO,IAHP,SAOIK,MAAMD,GAPV,cAObE,EAPa,iBAQEA,EAASC,OARX,QAQbC,EARa,OAUnBP,EAAYO,EAAOC,MACnBC,QAAQC,IAAIH,GAXO,4CAAH,qDAalBI,KAEC,CAACZ,IAGF,yBAAKhC,UAAU,aACb,yBAAKA,UAAU,aACb,uBAAGA,UAAU,oBAAb,sBACA,kBAAC,EAAD,CACEE,YAAaA,KAGjB,yBAAKF,UAAU,8BACb,kBAAC,EAAD,CACE2B,SAAUA,OCzBAkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvD,GACLoC,QAAQpC,MAAMA,EAAMwD,a","file":"static/js/main.914de7ad.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Error = ({ mensaje }) => {\n    return (\n        <p className=\"my-3 p-4 text-center  alert alert-primary\">{mensaje}</p>\n    );\n}\n\nexport default Error;","import React, { useState } from 'react';\nimport Error from \"../components/Error\";\n\nconst Formulario = ({setBusqueda}) => {\n\n    const [termino, setTermino] = useState(\"\");\n    const [error, setError] = useState(false);\n\n    const buscarImagenes = e => {\n        e.preventDefault();\n\n        if (termino.trim() === \"\") {\n            setError(true);\n            return;\n        }\n        setError(false);\n        setBusqueda(termino);\n    }\n\n    return (\n        <form\n            onSubmit={buscarImagenes}\n        >\n            <div className=\"row\">\n                <div className=\"form-group col-md-8\">\n                    <input\n                        type=\"text\"\n                        className=\"form-control form-control-lg\"\n                        placeholder=\"Busca una imagen: ejemplo: futbol o café\"\n                        onChange={e => setTermino(e.target.value)}\n                    />\n                </div>\n                <div className=\"form-group col-md-4\">\n                    <input\n                        type=\"submit\"\n                        className=\"btn btn-lg btn-danger btn-block\"\n                        value=\"Buscar\"\n                    />\n                </div>\n            </div>\n            {error\n                ? <Error\n                    mensaje=\"Agrega un término de búsqueda\"\n                />\n                : null\n            }\n        </form>\n    );\n}\n\nexport default Formulario;","import React from 'react';\n\nconst Imagen = ({ imagen }) => {\n\n    const { largeImageURL, likes, previewURL, tags, views } = imagen;\n\n    return (\n        <div className=\"col-12 col-sm-6 col-md-4 col-lg-3 mb-4\">\n            <div className=\"card\">\n                <img src={previewURL} alt={tags} className=\"card-img-top\" />\n            </div>\n        </div>\n    );\n}\n\nexport default Imagen;","import React from 'react';\nimport Imagen from \"./Imagen\";\n\nconst ListadoImagenes = ({ imagenes }) => {\n    return (\n        <div className=\"col-12 p-5 row\">\n            {imagenes.map(imagen => (\n                <Imagen\n                    key={imagen.id}\n                    imagen={imagen}\n                />\n            ))}\n        </div>\n    );\n}\n\nexport default ListadoImagenes;","import React, { useState, useEffect } from 'react';\nimport Formulario from \"./components/Formulario\";\nimport ListadoImagenes from \"./components/ListadoImagenes\";\n\nfunction App() {\n\n  const [busqueda, setBusqueda] = useState(\"\");\n  const [imagenes, setImagenes] = useState([]);\n\n  useEffect(() => {\n    const consultarApi = async () => {\n      if (busqueda === \"\") return;\n\n      const imagenesPorPagina = 30;\n      const key = \"17612582-3fd67665bc6afd3f6b6a62b89\";\n      const url = `https://pixabay.com/api/?key=${key}&q=${busqueda}&_per_page=${imagenesPorPagina}`;\n\n      const response = await fetch(url);\n      const result = await response.json();\n\n      setImagenes(result.hits);\n      console.log(result)\n    }\n    consultarApi();\n\n  }, [busqueda])\n\n  return (\n    <div className=\"container\">\n      <div className=\"jumbotron\">\n        <p className=\"lead text-center\">Buscador de Images</p>\n        <Formulario\n          setBusqueda={setBusqueda}\n        />\n      </div>\n      <div className=\"row justify-content-center\">\n        <ListadoImagenes\n          imagenes={imagenes}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}