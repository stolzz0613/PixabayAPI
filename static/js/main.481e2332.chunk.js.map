{"version":3,"sources":["components/Error.js","components/Formulario.js","components/Imagen.js","components/ListadoImagenes.js","App.js","serviceWorker.js","index.js"],"names":["Error","mensaje","className","Formulario","setBusqueda","useState","termino","setTermino","error","setError","onSubmit","e","preventDefault","trim","type","placeholder","onChange","target","value","Imagen","imagen","largeImageURL","likes","previewURL","tags","views","src","alt","href","rel","ListadoImagenes","imagenes","map","key","id","App","busqueda","setImagenes","pagina","setPagina","totalPaginas","setTotalPaginas","useEffect","a","imagenesPorPagina","url","fetch","response","json","result","hits","calcularTotalPaginas","Math","ceil","totalHits","document","querySelector","scrollIntoView","behavior","consultarApi","onClick","nuevaPagina","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.481e2332.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Error = ({ mensaje }) => {\n    return (\n        <p className=\"my-3 p-4 text-center  alert alert-primary\">{mensaje}</p>\n    );\n}\n\nexport default Error;","import React, { useState } from 'react';\nimport Error from \"../components/Error\";\n\nconst Formulario = ({ setBusqueda }) => {\n\n    const [termino, setTermino] = useState(\"\");\n    const [error, setError] = useState(false);\n\n    const buscarImagenes = e => {\n        e.preventDefault();\n\n        if (termino.trim() === \"\") {\n            setError(true);\n            return;\n        }\n        setError(false);\n        setBusqueda(termino);\n    }\n\n    return (\n        <form\n            onSubmit={buscarImagenes}\n        >\n            <div className=\"row\">\n                <div className=\"form-group col-md-8\">\n                    <input\n                        type=\"text\"\n                        className=\"form-control form-control-lg\"\n                        placeholder=\"Busca una imagen: ejemplo: futbol o café\"\n                        onChange={e => setTermino(e.target.value)}\n                    />\n                </div>\n                <div className=\"form-group col-md-4\">\n                    <input\n                        type=\"submit\"\n                        className=\"btn btn-lg btn-danger btn-block\"\n                        value=\"Buscar\"\n                    />\n                </div>\n            </div>\n            {error\n                ? <Error\n                    mensaje=\"Agrega un término de búsqueda\"\n                />\n                : null\n            }\n        </form>\n    );\n}\n\nexport default Formulario;","import React from 'react';\n\nconst Imagen = ({ imagen }) => {\n\n    const { largeImageURL, likes, previewURL, tags, views } = imagen;\n\n\n    return (\n\n        <div className=\"card border-primary\">\n            <img src={previewURL} alt={tags} className=\"card-img-top\" />\n            <div className=\"card-body\">\n                <button type=\"button\" className=\"btn btn-outline-info btn-block\">\n                    Me Gusta <span className=\"badge badge-outline-light\">{likes}</span>\n                </button>\n                <button type=\"button\" className=\"btn btn-outline-info btn-block\">\n                    Vistas <span className=\"badge badge-outline-light\">{views}</span>\n                </button>\n            </div>\n            <div className=\"card-footer\">\n                <a\n                    href={largeImageURL}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"btn btn-warning btn-block\"\n                >Ver Imagen</a>\n            </div>\n        </div >\n\n    );\n}\n\nexport default Imagen;","import React from 'react';\nimport Imagen from \"./Imagen\";\n\nconst ListadoImagenes = ({ imagenes }) => {\n    return (\n        <div className=\"card-columns\">\n            {imagenes.map(imagen => (\n                < Imagen\n                    key={imagen.id}\n                    imagen={imagen}\n                />\n            ))}\n        </div>\n    );\n}\n\nexport default ListadoImagenes;","import React, { useState, useEffect } from \"react\";\nimport Formulario from \"./components/Formulario\";\nimport ListadoImagenes from \"./components/ListadoImagenes\";\n\nfunction App() {\n  const [busqueda, setBusqueda] = useState(\"\");\n  const [imagenes, setImagenes] = useState([]);\n  const [pagina, setPagina] = useState(1);\n  const [totalPaginas, setTotalPaginas] = useState(1);\n\n  useEffect(() => {\n    const consultarApi = async () => {\n      if (busqueda === \"\") return;\n      const imagenesPorPagina = 30;\n      const key = \"17612582-3fd67665bc6afd3f6b6a62b89\";\n      const url = `https://pixabay.com/api/?key=${key}&q=${busqueda}&per_page=${imagenesPorPagina}&page=${pagina}`;\n\n      const response = await fetch(url);\n      const result = await response.json();\n\n      setImagenes(result.hits);\n\n      const calcularTotalPaginas = Math.ceil(\n        result.totalHits / imagenesPorPagina\n      );\n      setTotalPaginas(calcularTotalPaginas);\n      const jumbotron = document.querySelector(\".jumbotron\");\n      jumbotron.scrollIntoView({ behavior: \"smooth\" })\n    };\n    consultarApi();\n  }, [busqueda, pagina]);\n\n  const paginaAnterior = () => {\n    const nuevaPagina = pagina - 1;\n\n    if (nuevaPagina === 0) return;\n    setPagina(nuevaPagina);\n  }\n\n  const paginaSiguiente = () => {\n    const nuevaPagina = pagina + 1;\n    if (nuevaPagina > totalPaginas) return;\n    setPagina(nuevaPagina);\n  }\n\n\n\n  return (\n    <div className=\"container\">\n      <div className=\"jumbotron\">\n        <h1 className=\"text-center\">Buscador de Images</h1>\n        <Formulario setBusqueda={setBusqueda} />\n      </div>\n      \n        <ListadoImagenes imagenes={imagenes} />\n        <div className=\"row justify-content-center\">\n        {(pagina === 1) ? null : (\n          <button\n            type=\"button\"\n            className=\"btn btn-outline-info btn-lg mr-1\"\n            onClick={paginaAnterior}\n          >&laquo; Anterior</button>\n        )}\n\n        {(pagina === totalPaginas) ? null : (\n          <button\n            type=\"button mx-auto\"\n            className=\"btn btn-outline-success\"\n            onClick={paginaSiguiente}\n          >Siguiente &raquo;</button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}